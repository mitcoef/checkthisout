//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.2

use super::sea_orm_active_enums::InGroup;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Serialize, Deserialize)]
#[sea_orm(table_name = "postcode")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub postcode: i32,
    #[sea_orm(column_type = "Double")]
    pub lon: f64,
    #[sea_orm(column_type = "Double")]
    pub lat: f64,
    pub postcode_extension_distance_group: InGroup,
    pub created_at: Option<DateTime>,
    pub updated_at: Option<DateTime>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::filtered_ranks::Entity")]
    FilteredRanks,
}

impl Related<super::filtered_ranks::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::FilteredRanks.def()
    }
}

impl Related<super::profiles::Entity> for Entity {
    fn to() -> RelationDef {
        super::filtered_ranks::Relation::Profiles.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::filtered_ranks::Relation::Postcode.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
