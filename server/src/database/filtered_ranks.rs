//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.2

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Serialize, Deserialize)]
#[sea_orm(table_name = "filtered_ranks")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub profile_id: i32,
    #[sea_orm(primary_key, auto_increment = false)]
    pub postcode: i32,
    #[sea_orm(column_type = "Double")]
    pub distance: f64,
    #[sea_orm(column_type = "Double")]
    pub rank: f64,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::postcode::Entity",
        from = "Column::Postcode",
        to = "super::postcode::Column::Postcode",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Postcode,
    #[sea_orm(
        belongs_to = "super::profiles::Entity",
        from = "Column::ProfileId",
        to = "super::profiles::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Profiles,
}

impl Related<super::postcode::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Postcode.def()
    }
}

impl Related<super::profiles::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Profiles.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
