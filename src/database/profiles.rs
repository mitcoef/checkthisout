//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.2

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Serialize, Deserialize)]
#[sea_orm(table_name = "profiles")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub first_name: String,
    pub last_name: String,
    pub city: String,
    pub street: String,
    pub house_number: String,
    #[sea_orm(column_type = "Double")]
    pub lon: f64,
    #[sea_orm(column_type = "Double")]
    pub lat: f64,
    pub max_driving_distance: i32,
    #[sea_orm(column_type = "Double")]
    pub profile_score: f64,
    #[sea_orm(column_type = "Double")]
    pub profile_picture_score: f64,
    #[sea_orm(column_type = "Double")]
    pub profile_description_score: f64,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::filtered_ranks::Entity")]
    FilteredRanks,
}

impl Related<super::filtered_ranks::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::FilteredRanks.def()
    }
}

impl Related<super::postcode::Entity> for Entity {
    fn to() -> RelationDef {
        super::filtered_ranks::Relation::Postcode.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::filtered_ranks::Relation::Profiles.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
